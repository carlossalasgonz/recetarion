// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recetarion.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(RecetarionDbContext))]
    [Migration("20230822092313_AddedSeeders")]
    partial class AddedSeeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("char(36)");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("IngredientUser", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("IngredientsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("IngredientUser");
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.Property<Guid>("PublicationsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersLikeId")
                        .HasColumnType("char(36)");

                    b.HasKey("PublicationsId", "UsersLikeId");

                    b.HasIndex("UsersLikeId");

                    b.ToTable("PublicationUser");
                });

            modelBuilder.Entity("Recetarion.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Recetarion.Models.Critic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Critics");
                });

            modelBuilder.Entity("Recetarion.Models.CustomList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomLists");
                });

            modelBuilder.Entity("Recetarion.Models.CustomListRecipe", b =>
                {
                    b.Property<Guid>("CustomListId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.HasKey("CustomListId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CustomListRecipes");
                });

            modelBuilder.Entity("Recetarion.Models.Follow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("FolloweeId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.HasKey("FollowerId", "FolloweeId");

                    b.HasIndex("FolloweeId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Recetarion.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Recetarion.Models.GroupPermission", b =>
                {
                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Action")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("GroupRoleId", "Action");

                    b.ToTable("GroupPermissions");
                });

            modelBuilder.Entity("Recetarion.Models.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("Recetarion.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Image.png",
                            Type = "png"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<float>("Density")
                        .HasColumnType("float");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("555b2b74-2c58-408d-bfc2-bb71f142f036"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Almond Meal"
                        },
                        new
                        {
                            Id = new Guid("183039ed-0c2e-4404-adea-6fe55cd4d65f"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("7e72e5fa-6d1b-4dd5-a151-4c0aa0efc48a"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Amaranth"
                        },
                        new
                        {
                            Id = new Guid("192af5dc-2fc2-4d11-8b8e-10a82161dece"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Apples"
                        },
                        new
                        {
                            Id = new Guid("576b8820-b7c1-4333-946c-92a38206bc9c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Apricots"
                        },
                        new
                        {
                            Id = new Guid("d5185710-bd47-4328-8277-b5516e05ac69"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Avocados"
                        },
                        new
                        {
                            Id = new Guid("5b5a3983-6b17-4e31-a8b5-0a92fbc9eb19"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Bananas"
                        },
                        new
                        {
                            Id = new Guid("05084dcf-0fd1-4853-b7a4-bfbb7f32d8c9"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("504ae686-1dbb-4da5-9b91-dbbd1cea1742"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Beef"
                        },
                        new
                        {
                            Id = new Guid("2806f3d8-a4ff-4270-ba99-fd11df8819da"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Beef Chuck"
                        },
                        new
                        {
                            Id = new Guid("3b3a8363-7ff7-43cb-9ccd-ed43c795da1c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Beef Ribs"
                        },
                        new
                        {
                            Id = new Guid("48976dbb-8d58-4fbe-bb75-cf6185d237e1"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Beef Tenderloin"
                        },
                        new
                        {
                            Id = new Guid("d6d1a554-7839-48ea-99ba-5f7f63b2096d"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Brisket"
                        },
                        new
                        {
                            Id = new Guid("49faabf6-7aaa-497b-81c7-9883a84ca594"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("5fbeef36-d475-4def-89bb-0b6aa83c87f2"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Buckwheat"
                        },
                        new
                        {
                            Id = new Guid("2ce824b9-34fa-4a95-a972-3c2eb64edbc0"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Bulgur"
                        },
                        new
                        {
                            Id = new Guid("aeaec642-3ca6-4404-9aae-a5293fd55831"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = new Guid("ff1a2af4-5d6d-41c5-a3a7-c34210bf2cf3"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Cherries"
                        },
                        new
                        {
                            Id = new Guid("092eea21-c607-4aa8-86ce-b1506636dc4e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chia Seeds"
                        },
                        new
                        {
                            Id = new Guid("bd940e76-7313-40a9-88f2-996317bfedbf"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = new Guid("334c2c6e-4d2e-4697-84c5-40145eb1101e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chicken Breasts"
                        },
                        new
                        {
                            Id = new Guid("42c6491f-e6f4-4f24-83b7-7c42a94e2228"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chicken Legs"
                        },
                        new
                        {
                            Id = new Guid("b471b021-a4bd-4a9e-b06d-2a0e6dcb7be6"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chicken Thighs"
                        },
                        new
                        {
                            Id = new Guid("c7185756-2b90-43b6-b72f-f661fa4e2835"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chicken Wings"
                        },
                        new
                        {
                            Id = new Guid("27bf3f89-c5dd-4627-9b31-ecef5504e8d9"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Chocolate"
                        },
                        new
                        {
                            Id = new Guid("75527a76-04d1-414c-971c-6456847cb879"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Coconut"
                        },
                        new
                        {
                            Id = new Guid("ecd8c95d-525f-47a0-abcb-92727b2cf52d"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Corn Flour"
                        },
                        new
                        {
                            Id = new Guid("cf698f78-4692-4dd6-8599-9027abaa2b9a"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Cornish Hens"
                        },
                        new
                        {
                            Id = new Guid("5c8e218c-12a0-490f-8240-5ee0d6998e33"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Cornmeal"
                        },
                        new
                        {
                            Id = new Guid("50451ec4-fe8c-4a8c-b62f-807b5d0b8f8f"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Duck"
                        },
                        new
                        {
                            Id = new Guid("de8e0a2a-815e-4eab-a2ae-fa4fe0935cba"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("667312d2-8dc7-4438-9a4e-eb7bf86fc9f5"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Flax Seeds"
                        },
                        new
                        {
                            Id = new Guid("c410f959-8550-4e51-ba01-1f57a94dd1bf"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Goat"
                        },
                        new
                        {
                            Id = new Guid("7c858b13-dc57-42e4-999b-8e0405bc9510"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Ground Beef"
                        },
                        new
                        {
                            Id = new Guid("a0007344-135c-4c40-9713-be753fe015f0"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Ground Chicken"
                        },
                        new
                        {
                            Id = new Guid("76c1ecdd-3548-45d6-aec1-ebb302aaa04a"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Ground Pork"
                        },
                        new
                        {
                            Id = new Guid("d39776f6-f031-4bb3-9f33-8d1d797c1349"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Ground Turkey"
                        },
                        new
                        {
                            Id = new Guid("7f24d133-67cc-4717-8298-0a268f427200"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Lamb"
                        },
                        new
                        {
                            Id = new Guid("d82a45c2-7875-4091-b0f7-e9aed01a4f3e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Mangos"
                        },
                        new
                        {
                            Id = new Guid("7e57b864-cbbd-4be0-b76d-c162031e8f17"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Millet"
                        },
                        new
                        {
                            Id = new Guid("faca3207-629e-4ec2-91b2-b0ba35aa3025"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Mushroom"
                        },
                        new
                        {
                            Id = new Guid("920dec8f-4d88-4fd3-9069-e2ca1a1011d3"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Nectarines"
                        },
                        new
                        {
                            Id = new Guid("7ddff466-ebf5-4904-9397-8b2f652cc55e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Oat Flour"
                        },
                        new
                        {
                            Id = new Guid("e20c794e-70dd-4f1c-b37f-6b30d95956f2"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("283cb167-332b-4244-81fd-3feef206607e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Peaches"
                        },
                        new
                        {
                            Id = new Guid("a67be4fb-eb7a-4dc3-b00d-4e37c2abc342"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Peanuts"
                        },
                        new
                        {
                            Id = new Guid("ab890672-15f2-4bb0-a5c4-ce5f6cff44db"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pears"
                        },
                        new
                        {
                            Id = new Guid("f208e279-48c9-4190-bca9-d426235e2e1e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pineapples"
                        },
                        new
                        {
                            Id = new Guid("6f5aa8a0-0ef9-4a12-b79e-2dc5da8182ad"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Plums"
                        },
                        new
                        {
                            Id = new Guid("63f81d0e-83e1-441f-af19-e25cb7c863f6"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pomegranates"
                        },
                        new
                        {
                            Id = new Guid("9b1a5a23-21aa-48f1-b3ec-37bbaa444959"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pork"
                        },
                        new
                        {
                            Id = new Guid("35a0c4bc-d72f-4651-a8b6-f9eae4b73c28"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pork Ribs"
                        },
                        new
                        {
                            Id = new Guid("c1919792-2ceb-4f6f-82d1-a9d961d3a2f0"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pork Shoulder"
                        },
                        new
                        {
                            Id = new Guid("1f8fc129-0a98-42a9-9673-559932631fb4"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Pork Tenderloin"
                        },
                        new
                        {
                            Id = new Guid("90072d03-cbfc-4d7a-83b4-821d546fd1d4"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Prime Rib"
                        },
                        new
                        {
                            Id = new Guid("f22c9132-969a-46d6-b711-c22dd697dafb"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("ee3e7108-f932-4121-9d5f-f78890af628e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Sausage"
                        },
                        new
                        {
                            Id = new Guid("5bb15aab-e068-408f-a26b-6260a19ecfed"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("ca98ba01-ce07-488b-93d6-50866f7597af"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = new Guid("ce9249ba-c718-437f-881e-1c3692fde203"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Sirloin"
                        },
                        new
                        {
                            Id = new Guid("0899d724-b0ef-4ddd-aec2-87cd1faea0c4"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Spelt"
                        },
                        new
                        {
                            Id = new Guid("82aab854-e1b0-4de3-89a4-1ab509282de3"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Steak"
                        },
                        new
                        {
                            Id = new Guid("04f70e03-e650-443e-997e-f1ed8401e9a6"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Tapioca Flour"
                        },
                        new
                        {
                            Id = new Guid("5a05b326-0acc-43b4-a610-10d360f614fb"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("3221780e-dd89-4bd7-a29a-57c810e97856"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Veal"
                        },
                        new
                        {
                            Id = new Guid("49072cfc-9f6f-4531-a295-1ded17edf5aa"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Venison"
                        },
                        new
                        {
                            Id = new Guid("93644195-f6eb-4fe9-b27a-7b2580d33b8d"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "White Rice Flour"
                        },
                        new
                        {
                            Id = new Guid("ca89e1ae-afc7-482c-8b33-171592f42764"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Wild Game"
                        },
                        new
                        {
                            Id = new Guid("66e0c93c-9bbc-4d0f-81fa-f372f5477dfe"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            Name = "Wild Rice"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.LikeIngredient", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDislike")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("LikeIngredients");
                });

            modelBuilder.Entity("Recetarion.Models.LikePublication", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "PublicationId");

                    b.HasIndex("PublicationId");

                    b.ToTable("LikePublications");
                });

            modelBuilder.Entity("Recetarion.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Recetarion.Models.PublicationImage", b =>
                {
                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<uint>("Order")
                        .HasColumnType("int unsigned");

                    b.HasKey("PublicationId", "ImageId");

                    b.ToTable("PublicationImages");
                });

            modelBuilder.Entity("Recetarion.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CustomListId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomListId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Recetarion.Models.RecipeIngredient", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<uint>("quantity")
                        .HasColumnType("int unsigned");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("Recetarion.Models.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Recetarion.Models.Subscription", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("Default")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Equivalence")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52fed28d-9e2e-4f43-a392-6541cd4ece48"),
                            Abbreviation = "g",
                            Default = true,
                            Equivalence = 1f,
                            Title = "Grams",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("a176c3bc-3738-454e-a5ba-7475fb2618c6"),
                            Abbreviation = "kg",
                            Default = false,
                            Equivalence = 0.001f,
                            Title = "Kilogram",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("395b337e-b7e0-4117-a601-344533326025"),
                            Abbreviation = "mg",
                            Default = false,
                            Equivalence = 1000f,
                            Title = "Milligram",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("58ece1ef-2d52-4dde-932e-bfc883065a91"),
                            Abbreviation = "oz",
                            Default = false,
                            Equivalence = 0.035274f,
                            Title = "Ounce",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("f43eaf9f-bc1c-4c5d-b5b0-30bc505786e8"),
                            Abbreviation = "lb",
                            Default = false,
                            Equivalence = 0.035274f,
                            Title = "Pound",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("f316d622-82f5-4e34-b04e-dbd44002aac4"),
                            Abbreviation = "st",
                            Default = false,
                            Equivalence = 0.035274f,
                            Title = "Stone",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("2eada2c1-3d6d-497d-8c0a-f0176aec2e18"),
                            Abbreviation = "l",
                            Default = true,
                            Equivalence = 1f,
                            Title = "Liters",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("525c968a-37f5-4cab-aacc-34d5c0c6039a"),
                            Abbreviation = "ml",
                            Default = false,
                            Equivalence = 1000f,
                            Title = "Milliliters",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("5f75f7e1-8fb9-4af5-81fd-044674dbd7a5"),
                            Abbreviation = "tbsp",
                            Default = false,
                            Equivalence = 67.62805f,
                            Title = "Tablespoon",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("52c3b265-0020-4da5-9288-bc800c2da000"),
                            Abbreviation = "tsp",
                            Default = false,
                            Equivalence = 202.8841f,
                            Title = "Teaspoon",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("1545b641-1d8c-4fec-abf9-a14f2a5c8135"),
                            Abbreviation = "fl. oz",
                            Default = false,
                            Equivalence = 33.81402f,
                            Title = "Fluid ounce",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("680e37b0-1a67-4608-a8d1-a8ac849152ef"),
                            Abbreviation = "c",
                            Default = false,
                            Equivalence = 4.226753f,
                            Title = "Cup",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("f721256f-b4a7-4508-a2f5-110a15165ed3"),
                            Abbreviation = "qt",
                            Default = false,
                            Equivalence = 1.056688f,
                            Title = "Quart",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("f3ac7f04-c797-4e15-98d9-2756cd228536"),
                            Abbreviation = "pt",
                            Default = false,
                            Equivalence = 2.113376f,
                            Title = "Pint",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("3998d8f3-2f55-4ef4-9567-221a28a15ab9"),
                            Abbreviation = "gal",
                            Default = false,
                            Equivalence = 0.264172f,
                            Title = "Gallon",
                            Type = "Volume"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("FollowerCount")
                        .HasColumnType("int unsigned");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenFacebook")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenTwitter")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("645bf299-ee46-48db-b352-ef09c5fbb21d"),
                            CreatedAt = new DateTime(2023, 8, 22, 2, 23, 13, 606, DateTimeKind.Local).AddTicks(4964),
                            Description = "",
                            Email = "admin@recetarion.com",
                            FollowerCount = 0u,
                            ImageId = new Guid("43c47239-a9c8-429d-9efd-942b6f46a811"),
                            PasswordHash = "00ZPyTB82MUBqBzPTRl9G9TJ64Q3DanjgwBxWRRdFZiE3B7KZjn0Z/DCh0DGagi42n8OZq/tNE2OikqN75crsQ==",
                            PasswordSalt = "IQVrJsnqwPAV2J9O/2p2TBfjJAcYVU4ALhDVfC5JFmMcwbqzvMc3xXYlLmOpx1Mb/zdMQqze24iXnjNOHzD0ZVIemcsozd1gNS2C5UCxFFkmm9mszGEGRiMJA47M4MA40KadlR1aA/l5RwA17fWWOWLsbLmSgUkYHguP+ndd370=",
                            UserRoleId = new Guid("65bd360f-77f4-4be8-8424-934d3e690c4d"),
                            Username = "Recetarion Admin"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.UserPermission", b =>
                {
                    b.Property<Guid>("UserRolesId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Action")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserRolesId", "Action");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Recetarion.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65bd360f-77f4-4be8-8424-934d3e690c4d"),
                            Title = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("67755466-7714-4abe-a0c0-de3e68107e30"),
                            Title = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c90c6a13-5705-4bd3-bcf8-71e5bbc25656"),
                            Title = "Client"
                        });
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("Recetarion.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientUser", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersLikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Comment", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Critic", b =>
                {
                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("Critics")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.CustomList", b =>
                {
                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("Lists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.CustomListRecipe", b =>
                {
                    b.HasOne("Recetarion.Models.CustomList", null)
                        .WithMany("RecipesPivot")
                        .HasForeignKey("CustomListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("Lists")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Follow", b =>
                {
                    b.HasOne("Recetarion.Models.User", "Followee")
                        .WithMany()
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Recetarion.Models.GroupPermission", b =>
                {
                    b.HasOne("Recetarion.Models.GroupRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.GroupRole", b =>
                {
                    b.HasOne("Recetarion.Models.Group", null)
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Image", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany("Images")
                        .HasForeignKey("PublicationId");
                });

            modelBuilder.Entity("Recetarion.Models.LikeIngredient", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany("Likes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("LikeIngredients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.LikePublication", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany("Likes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("LikePublications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Recipe", b =>
                {
                    b.HasOne("Recetarion.Models.CustomList", null)
                        .WithMany("Recipes")
                        .HasForeignKey("CustomListId");
                });

            modelBuilder.Entity("Recetarion.Models.RecipeIngredient", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany("RecipePivot")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("IngredientsQuantitys")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Step", b =>
                {
                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Subscription", b =>
                {
                    b.HasOne("Recetarion.Models.Group", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.User", b =>
                {
                    b.HasOne("Recetarion.Models.UserRole", null)
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.UserPermission", b =>
                {
                    b.HasOne("Recetarion.Models.UserRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("Recetarion.Models.CustomList", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("RecipesPivot");
                });

            modelBuilder.Entity("Recetarion.Models.Group", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.GroupRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Recetarion.Models.Ingredient", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("RecipePivot");
                });

            modelBuilder.Entity("Recetarion.Models.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Recetarion.Models.Recipe", b =>
                {
                    b.Navigation("Critics");

                    b.Navigation("IngredientsQuantitys");

                    b.Navigation("Lists");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Recetarion.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikeIngredients");

                    b.Navigation("LikePublications");

                    b.Navigation("Lists");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.UserRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}

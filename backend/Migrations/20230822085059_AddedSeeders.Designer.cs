// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recetarion.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(RecetarionDbContext))]
    [Migration("20230822085059_AddedSeeders")]
    partial class AddedSeeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("char(36)");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.Property<Guid>("PublicationsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersLikeId")
                        .HasColumnType("char(36)");

                    b.HasKey("PublicationsId", "UsersLikeId");

                    b.HasIndex("UsersLikeId");

                    b.ToTable("PublicationUser");
                });

            modelBuilder.Entity("Recetarion.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Recetarion.Models.Critic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Critics");
                });

            modelBuilder.Entity("Recetarion.Models.CustomList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("CustomLists");
                });

            modelBuilder.Entity("Recetarion.Models.CustomListRecipe", b =>
                {
                    b.Property<Guid>("CustomListId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.HasKey("CustomListId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CustomListRecipes");
                });

            modelBuilder.Entity("Recetarion.Models.Follow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("FolloweeId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.HasKey("FollowerId", "FolloweeId");

                    b.HasIndex("FolloweeId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Recetarion.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Recetarion.Models.GroupPermission", b =>
                {
                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Action")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("GroupRoleId", "Action");

                    b.ToTable("GroupPermissions");
                });

            modelBuilder.Entity("Recetarion.Models.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("Recetarion.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Image.png",
                            Type = "png"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<float>("Density")
                        .HasColumnType("float");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("918927dc-c209-430d-9b18-f914579d6fbb"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Almond Meal"
                        },
                        new
                        {
                            Id = new Guid("c7493d21-a5ab-4628-9ebd-1b8a482b7e5b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("bba2e0d4-93b1-4543-92fd-7c423b774d1e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Amaranth"
                        },
                        new
                        {
                            Id = new Guid("ad361b0c-e6fd-41e6-8be7-e90d9af34796"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Apples"
                        },
                        new
                        {
                            Id = new Guid("3ddbc63b-a61d-4869-9b70-0508602d439c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Apricots"
                        },
                        new
                        {
                            Id = new Guid("8e3207e2-b581-4eb5-a7d2-b8e78677b27b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Avocados"
                        },
                        new
                        {
                            Id = new Guid("c4f36e41-f2f2-4119-83fb-e8c81a2c06f0"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Bananas"
                        },
                        new
                        {
                            Id = new Guid("c0e637aa-4137-4ec9-bf33-4d9f2c76bf9b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("0727f01c-0685-4e0f-ba81-d4fb697ef347"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Beef"
                        },
                        new
                        {
                            Id = new Guid("e29d4b64-0468-4fb8-bd9b-8fa4eddf03d7"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Beef Chuck"
                        },
                        new
                        {
                            Id = new Guid("564a4321-7958-40a1-8af4-2d4c32287de0"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Beef Ribs"
                        },
                        new
                        {
                            Id = new Guid("fd14af59-99bd-4a37-a4b6-7f034ea7acb8"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Beef Tenderloin"
                        },
                        new
                        {
                            Id = new Guid("5118ac29-bd70-43c5-80ee-609157f5eb1a"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Brisket"
                        },
                        new
                        {
                            Id = new Guid("986ef3c4-8d19-4f6e-8308-1972b1227555"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("6a305f6e-5008-4e19-aa80-dc2873444195"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Buckwheat"
                        },
                        new
                        {
                            Id = new Guid("6d9425fb-67f7-4718-9270-6ddd794ffa12"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Bulgur"
                        },
                        new
                        {
                            Id = new Guid("dac4b8dd-46bf-4dbc-8e0b-90efe8872e8c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = new Guid("6a24b7cc-8635-4faa-9820-666b8d1b24ad"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Cherries"
                        },
                        new
                        {
                            Id = new Guid("d6879f79-bdc4-48df-b9e7-09377301c63b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chia Seeds"
                        },
                        new
                        {
                            Id = new Guid("21eea24a-22d1-4cf4-8473-1c1e1cab65d4"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = new Guid("9c1a6fbb-38ee-47a9-9ba1-38388545d175"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chicken Breasts"
                        },
                        new
                        {
                            Id = new Guid("54b27ae8-2fa8-4bf9-9222-6d0c3e84521b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chicken Legs"
                        },
                        new
                        {
                            Id = new Guid("f92bab10-96f5-4b3a-8879-6b7c231e422c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chicken Thighs"
                        },
                        new
                        {
                            Id = new Guid("9360b981-2b6c-4e37-b68e-3b4d257e7a60"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chicken Wings"
                        },
                        new
                        {
                            Id = new Guid("2d7c1fda-450b-4524-bf8b-67b0ec84343f"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Chocolate"
                        },
                        new
                        {
                            Id = new Guid("92307062-243c-427d-b86e-4004f18973a5"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Coconut"
                        },
                        new
                        {
                            Id = new Guid("f0babb14-9d7e-4fbd-bf6d-f1ed09985de7"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Corn Flour"
                        },
                        new
                        {
                            Id = new Guid("7a071675-f027-4933-9b6f-c422eebfd2e9"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Cornish Hens"
                        },
                        new
                        {
                            Id = new Guid("a6ea8c41-f6ba-46f6-a526-e68297c05454"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Cornmeal"
                        },
                        new
                        {
                            Id = new Guid("5764d92f-6526-414e-b128-2f5e7952239a"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Duck"
                        },
                        new
                        {
                            Id = new Guid("b188ec51-371a-4b1a-99dd-cd3703146dfd"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("8dcd4bc7-c54e-4e13-b561-31a606ae89d5"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Flax Seeds"
                        },
                        new
                        {
                            Id = new Guid("a0299838-d0f6-43af-a6b1-d86e6cdd4895"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Goat"
                        },
                        new
                        {
                            Id = new Guid("9593addd-3554-4d0a-b453-a722682f1315"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Ground Beef"
                        },
                        new
                        {
                            Id = new Guid("3293a4e7-2981-4b42-b8ab-a0495da2d0a6"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Ground Chicken"
                        },
                        new
                        {
                            Id = new Guid("7f7fe312-303a-4e6e-9a82-42b4944f6fca"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Ground Pork"
                        },
                        new
                        {
                            Id = new Guid("a09afd45-216b-4fb5-8e2e-1abb0e25ab7e"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Ground Turkey"
                        },
                        new
                        {
                            Id = new Guid("e008199f-9390-4388-9e01-e5828289bee2"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Lamb"
                        },
                        new
                        {
                            Id = new Guid("c2d0d4cc-ef8e-4b7f-8199-ac11634c9bff"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Mangos"
                        },
                        new
                        {
                            Id = new Guid("b839798a-ec69-4dad-b89f-33355c21be55"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Millet"
                        },
                        new
                        {
                            Id = new Guid("0a82836c-2613-4233-a9ec-d74d4b72159b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Mushroom"
                        },
                        new
                        {
                            Id = new Guid("9fff82d8-b0db-4794-818d-5c979b858b43"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Nectarines"
                        },
                        new
                        {
                            Id = new Guid("c0403162-7be5-4fdf-92b3-e269d6a1c343"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Oat Flour"
                        },
                        new
                        {
                            Id = new Guid("2e22ed0f-9d6b-4def-9b24-b5b52084756a"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("fbbf8f1f-93c6-495d-9761-d52690b1d31c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Peaches"
                        },
                        new
                        {
                            Id = new Guid("e5cd6545-4ac6-44cf-bbc9-ed82211a6729"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Peanuts"
                        },
                        new
                        {
                            Id = new Guid("c1f6e588-5072-402c-94a9-a55964e9b4ee"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pears"
                        },
                        new
                        {
                            Id = new Guid("17e9e943-fc4e-4756-a724-4c84a5891051"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pineapples"
                        },
                        new
                        {
                            Id = new Guid("be3b57cb-a38a-4b02-874c-14bd9dfdee05"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Plums"
                        },
                        new
                        {
                            Id = new Guid("7e146cb3-eb7f-44a3-bf62-da355e075b2b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pomegranates"
                        },
                        new
                        {
                            Id = new Guid("834687b4-1bce-4b77-bd5d-cb83974cd6f1"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pork"
                        },
                        new
                        {
                            Id = new Guid("875d4333-76b5-49ab-9c77-fbb23fd8b5d7"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pork Ribs"
                        },
                        new
                        {
                            Id = new Guid("f4159f48-1d96-4f93-a29c-ee64616c43cc"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pork Shoulder"
                        },
                        new
                        {
                            Id = new Guid("0d0200e8-a871-472e-8911-88f897e51030"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Pork Tenderloin"
                        },
                        new
                        {
                            Id = new Guid("f876bebb-bcee-4462-a0c8-9d80f6086907"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Prime Rib"
                        },
                        new
                        {
                            Id = new Guid("f94eff13-f547-4561-96f2-cfaa4b25b25d"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("e8123e0a-e5f6-4284-8e08-fb9bdcea097c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Sausage"
                        },
                        new
                        {
                            Id = new Guid("101d95cf-50b6-45ea-822c-386acc075831"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("c2ff80f4-0248-4631-bafb-656e9bed38c0"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = new Guid("74a5b416-569c-422e-8d5c-fa44d8fd2de6"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Sirloin"
                        },
                        new
                        {
                            Id = new Guid("2bef99d0-638c-46b0-b4f6-2746b570aaaf"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Spelt"
                        },
                        new
                        {
                            Id = new Guid("935de0d8-5a49-4d06-a369-6be45ad6234b"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Steak"
                        },
                        new
                        {
                            Id = new Guid("39f5c75e-189b-4378-b946-bb59e3af57e5"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Tapioca Flour"
                        },
                        new
                        {
                            Id = new Guid("bdf01259-6013-49ce-a5d3-dbca5a887a39"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("1e2201c0-11a9-4724-a8af-26a47281f73c"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Veal"
                        },
                        new
                        {
                            Id = new Guid("e7165e85-39d5-4179-9eac-ef179788dc92"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Venison"
                        },
                        new
                        {
                            Id = new Guid("7cc1d1ba-4dc1-4dfc-a930-7dc9f2093f66"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "White Rice Flour"
                        },
                        new
                        {
                            Id = new Guid("901541b2-b704-430b-8123-67308ad943da"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Wild Game"
                        },
                        new
                        {
                            Id = new Guid("15a45451-8ba7-4556-be85-47841e957392"),
                            Calories = 0,
                            Density = 1f,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            Name = "Wild Rice"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.LikeIngredient", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDislike")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("LikeIngredients");
                });

            modelBuilder.Entity("Recetarion.Models.LikePublication", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "PublicationId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("LikePublications");
                });

            modelBuilder.Entity("Recetarion.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Recetarion.Models.PublicationImage", b =>
                {
                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<uint>("Order")
                        .HasColumnType("int unsigned");

                    b.HasKey("PublicationId", "ImageId");

                    b.ToTable("PublicationImages");
                });

            modelBuilder.Entity("Recetarion.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CustomListId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomListId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Recetarion.Models.RecipeIngredient", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<uint>("quantity")
                        .HasColumnType("int unsigned");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("Recetarion.Models.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Recetarion.Models.Subscription", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserPermissionAction")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserPermissionUserRolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPermissionUserRolesId", "UserPermissionAction");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("Default")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Equivalence")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e5b14da-26f0-4366-b4cb-d18445774bac"),
                            Abbreviation = "g",
                            Default = true,
                            Equivalence = 1f,
                            Title = "Grams",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("5e554090-bc9c-4124-85e8-c7f37e6338de"),
                            Abbreviation = "kg",
                            Default = false,
                            Equivalence = 0.001f,
                            Title = "Kilogram",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("8297cb28-42c8-43e7-914b-c1211ae43a85"),
                            Abbreviation = "mg",
                            Default = false,
                            Equivalence = 1000f,
                            Title = "Milligram",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("9ac926d0-065c-44ed-adb9-6306e4e3f0f4"),
                            Abbreviation = "oz",
                            Default = false,
                            Equivalence = 0.035274f,
                            Title = "Ounce",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("2d825b4a-62d3-4583-8209-4a1d74fd7382"),
                            Abbreviation = "lb",
                            Default = false,
                            Equivalence = 0.035274f,
                            Title = "Pound",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("ab27297a-665a-4ecc-8ccc-aba3ae3c6fb2"),
                            Abbreviation = "st",
                            Default = false,
                            Equivalence = 0.035274f,
                            Title = "Stone",
                            Type = "Mass"
                        },
                        new
                        {
                            Id = new Guid("692fa015-0ebc-40a8-91b2-b524a74b0740"),
                            Abbreviation = "l",
                            Default = true,
                            Equivalence = 1f,
                            Title = "Liters",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("0e42a728-0898-44aa-a60d-db845551b71e"),
                            Abbreviation = "ml",
                            Default = false,
                            Equivalence = 1000f,
                            Title = "Milliliters",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("43b1e4b9-2a03-4eec-927d-06bf8c28eddc"),
                            Abbreviation = "tbsp",
                            Default = false,
                            Equivalence = 67.62805f,
                            Title = "Tablespoon",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("93373be9-1f20-43eb-8b16-fc54bcf22053"),
                            Abbreviation = "tsp",
                            Default = false,
                            Equivalence = 202.8841f,
                            Title = "Teaspoon",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("b93d21e9-afc9-4357-b93a-28b3d05c1b58"),
                            Abbreviation = "fl. oz",
                            Default = false,
                            Equivalence = 33.81402f,
                            Title = "Fluid ounce",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("83ef07c1-e727-4052-b53d-f55506c350f7"),
                            Abbreviation = "c",
                            Default = false,
                            Equivalence = 4.226753f,
                            Title = "Cup",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("30295b4e-b843-4805-9dde-9054ac1665dd"),
                            Abbreviation = "qt",
                            Default = false,
                            Equivalence = 1.056688f,
                            Title = "Quart",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("79cc4ad5-c038-49fd-bb73-c31258dc4055"),
                            Abbreviation = "pt",
                            Default = false,
                            Equivalence = 2.113376f,
                            Title = "Pint",
                            Type = "Volume"
                        },
                        new
                        {
                            Id = new Guid("57908bc8-08e6-41ef-a8cc-3e714c397213"),
                            Abbreviation = "gal",
                            Default = false,
                            Equivalence = 0.264172f,
                            Title = "Gallon",
                            Type = "Volume"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("FollowerCount")
                        .HasColumnType("int unsigned");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenFacebook")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenTwitter")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34ffc692-398e-4ae4-8f9c-b1ab9e616721"),
                            CreatedAt = new DateTime(2023, 8, 22, 1, 50, 59, 151, DateTimeKind.Local).AddTicks(7775),
                            Description = "",
                            Email = "admin@recetarion.com",
                            FollowerCount = 0u,
                            ImageId = new Guid("19e2a5ec-0e4a-41b0-b143-90d5a824dd94"),
                            PasswordHash = "8��B�uo��ʊ�Zj�E���(�Ykx>L��#t�\r��%DXh:p�)Yh+��ZU��iG",
                            PasswordSalt = "������ք#~Ag�r�,���U4m47$٨��<z���?��)f�N�s��>`�,_q�X�]�݁��矕���a+O �ZVG�;9��H\r�>r 6���R~{(��M%��g!�K�i�G/s��t�V",
                            UserRoleId = new Guid("cf3ae832-fb2c-4c5f-8781-6be5afff1a9f"),
                            Username = "Recetarion Admin"
                        });
                });

            modelBuilder.Entity("Recetarion.Models.UserPermission", b =>
                {
                    b.Property<Guid>("UserRolesId")
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Action")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserRolesId", "Action");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Recetarion.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf3ae832-fb2c-4c5f-8781-6be5afff1a9f"),
                            Title = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("4f0c7823-7118-48f9-9ad7-55981fa19d59"),
                            Title = "Admin"
                        },
                        new
                        {
                            Id = new Guid("65d13a15-e697-4111-add5-511fe9f39b6a"),
                            Title = "Client"
                        });
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("Recetarion.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersLikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Comment", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.Critic", b =>
                {
                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("Critics")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.CustomList", b =>
                {
                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("Lists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("Lists")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.CustomListRecipe", b =>
                {
                    b.HasOne("Recetarion.Models.CustomList", null)
                        .WithMany("RecipesPivot")
                        .HasForeignKey("CustomListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("Lists")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Follow", b =>
                {
                    b.HasOne("Recetarion.Models.User", "Followee")
                        .WithMany()
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Recetarion.Models.Group", b =>
                {
                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("Groups")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.GroupPermission", b =>
                {
                    b.HasOne("Recetarion.Models.GroupRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.GroupRole", b =>
                {
                    b.HasOne("Recetarion.Models.Group", null)
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Image", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany("Images")
                        .HasForeignKey("PublicationId");
                });

            modelBuilder.Entity("Recetarion.Models.Ingredient", b =>
                {
                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.LikeIngredient", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany("Likes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("LikeIngredients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("LikeIngredients")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.LikePublication", b =>
                {
                    b.HasOne("Recetarion.Models.Publication", null)
                        .WithMany("Likes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("LikePublications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("LikePublications")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.Publication", b =>
                {
                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("Publications")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.Recipe", b =>
                {
                    b.HasOne("Recetarion.Models.CustomList", null)
                        .WithMany("Recipes")
                        .HasForeignKey("CustomListId");
                });

            modelBuilder.Entity("Recetarion.Models.RecipeIngredient", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany("RecipePivot")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("IngredientsQuantitys")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Step", b =>
                {
                    b.HasOne("Recetarion.Models.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.Subscription", b =>
                {
                    b.HasOne("Recetarion.Models.Group", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.User", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetarion.Models.UserPermission", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserPermissionUserRolesId", "UserPermissionAction");
                });

            modelBuilder.Entity("Recetarion.Models.User", b =>
                {
                    b.HasOne("Recetarion.Models.Ingredient", null)
                        .WithMany("Users")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Recetarion.Models.UserRole", null)
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetarion.Models.UserPermission", b =>
                {
                    b.HasOne("Recetarion.Models.UserRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("Recetarion.Models.CustomList", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("RecipesPivot");
                });

            modelBuilder.Entity("Recetarion.Models.Group", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.GroupRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Recetarion.Models.Ingredient", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("RecipePivot");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Recetarion.Models.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Recetarion.Models.Recipe", b =>
                {
                    b.Navigation("Critics");

                    b.Navigation("IngredientsQuantitys");

                    b.Navigation("Lists");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Recetarion.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikeIngredients");

                    b.Navigation("LikePublications");

                    b.Navigation("Lists");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.UserPermission", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Groups");

                    b.Navigation("Ingredients");

                    b.Navigation("LikeIngredients");

                    b.Navigation("LikePublications");

                    b.Navigation("Lists");

                    b.Navigation("Publications");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Recetarion.Models.UserRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
